name: CD

on:
  workflow_dispatch:
  push:
    branches:
      - main

# Allow only 1 CD workflow at a time
concurrency:
  group: cd
  cancel-in-progress: false

jobs:
  ci:
    uses: ./.github/workflows/ci.yml
  
  create_release:
    runs-on: windows-latest
    needs: ci
    defaults: 
      run:
        shell: pwsh

    env:
      app_path: ./HaddySimHub
      dotnet_version: '9.0.100'
      node-version: 20
      clientapp_folder: './ClientApp/'
      dist_folder: '/dist'
      RELEASE_VERSION: v0.1.${{github.run_number}}
      solution_file: ./HaddySimHub.sln

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.dotnet_version }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.solution_file }} --runtime win-x64

    - name: Publish server app
      run: dotnet publish ./HaddySimHub -r win-x64 --output ${{ env.dist_folder }} --no-restore
    
    - name: Publish updater app
      run: dotnet publish ./Updater -r win-x64 --output ${{ env.dist_folder }} --no-restore
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('ClientApp/src/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.node-version }}
    
    - name: Install client app dependencies
      working-directory: ${{ env.clientapp_folder }}
      run: npm ci

    - name: Build client app
      working-directory: ${{ env.clientapp_folder }}
      run: npm run build --omit=dev

    - name: Copy client app to distribution folder
      run: |
        mkdir -Force ${{ env.dist_folder }}\wwwroot
        robocopy ${{ env.clientapp_folder }}dist/haddy-sim-hub-client/browser ${{ env.dist_folder }}\wwwroot /E || exit /b 0

    - name: Zip build result
      run: Compress-Archive -Path ${{ env.dist_folder }}/* -Destination haddy-simhub.zip

    - name: Create release and upload assets
      run: |
        gh release create ${{ env.RELEASE_VERSION }} haddy-simhub.zip --title "Release ${{ env.RELEASE_VERSION }}" --notes "Automated Release" --draft=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
